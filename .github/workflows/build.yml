name: Build
on:
  workflow_dispatch:
  push:
    paths-ignore:
      - "docs/**"
      - "README.md"
    branches:
      - Alpha

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true
  
env:
  REGISTRY: ghcr.io
jobs:
  build:
    permissions: write-all
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        job:
          - { type: "WithoutCGO", target: "android-arm64", id: "1" }
          - { type: "WithoutCGO", target: "linux-armv7", id: "2" }

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: set variables
        if: ${{github.ref_name=='Alpha'}}
        run: echo "VERSION=alpha-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        shell: bash

      - name: set variables
        if: ${{github.ref_name=='' || github.ref_type=='tag'}}
        run: echo "VERSION=$(git describe --tags)" >> $GITHUB_ENV
        shell: bash

      - name: set env
        run: |
          sudo timedatectl set-timezone "Asia/Jakarta"
          echo "NAME=clash.meta" >> $GITHUB_ENV
          echo "REPO=${{ github.repository }}" >> $GITHUB_ENV
          echo "ShortSHA=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_ENV
          echo "BUILDTIME=$(date)" >> $GITHUB_ENV
          echo "BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
        shell: bash

      - name: set env
        run: |
          echo "TAGS=with_gvisor" >> $GITHUB_ENV
          echo "LDFLAGS=-X 'github.com/metacubex/mihomo/constant.Version=${VERSION}' -X 'github.com/metacubex/mihomo/constant.BuildTime=${BUILDTIME}' -w -s -buildid=" >> $GITHUB_ENV
        shell: bash

      - name: get latest go version
        id: version
        run: |
          echo go_version=$(curl -s https://raw.githubusercontent.com/actions/go-versions/main/versions-manifest.json | grep -oE '"version": "[0-9]{1}.[0-9]{1,}(.[0-9]{1,})?"' | head -1 | cut -d':' -f2 | sed 's/ //g; s/"//g') >> $GITHUB_OUTPUT

      - name: setup go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ steps.version.outputs.go_version }}

      - name: build clash.meta
        env:
          NAME: clash.meta
          BINDIR: bin
        run: make -j$(($(nproc) + 1)) ${{ matrix.job.target }}

      - name: rename
        run: |
          cd bin
          ls -la
          cp ../.github/rename.sh ./
          bash ./rename.sh
          rm ./rename.sh
          ls -la
          cd ..

      - name: zip
        if: ${{  success() }}
        run: |
          cd bin
          ls -la
          chmod +x *
          cp ../.github/release.sh ./
          bash ./release.sh
          rm ./release.sh
          ls -la
          cd ..

      - name: save version
        run: echo ${VERSION} > bin/version.txt
        shell: bash

      - uses: actions/upload-artifact@v3
        if: ${{  success() }}
        with:
          name: clash.meta
          path: bin/

  Upload-Prerelease:
    permissions: write-all
    if: ${{ github.ref_type=='branch' && github.event_name != 'pull_request' }}
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: clash.meta
          path: bin/

      - name: delete current release assets
        uses: 8Mi-Tech/delete-release-assets-action@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: Prerelease-${{ github.ref_name }}
          deleteOnlyFromDrafts: false

      - name: set env
        run: |
          echo "BUILDTIME=$(TZ=Asia/Jakarta date)" >> $GITHUB_ENV
        shell: bash

      - name: tag repo
        uses: richardsimko/update-tag@v1.0.6
        with:
          tag_name: Prerelease-${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - run: |
          cat > release.txt << 'EOF'
          Release created at  ${{ env.BUILDTIME }}
          Synchronize ${{ github.ref_name }} branch code updates, keeping only the latest version
          <br>
          [Which file should I download?](https://github.com/MetaCubeX/mihomo/wiki/FAQ)
          [Docs](https://metacubex.github.io/Meta-Docs)
          EOF

      - name: upload prerelease
        uses: softprops/action-gh-release@v1
        if: ${{  success() }}
        with:
          tag_name: Prerelease-${{ github.ref_name }}
          files: |
            bin/*
          prerelease: true
          generate_release_notes: true
          body_path: release.txt

  upload:
    name: telegram upload release
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: donwload artifacts
        uses: actions/download-artifact@v3
        with:
          name: clash.meta
          path: bin

      - name: upload to telegram
        if: ${{  success() }}
        env:
          CHAT_ID: "-1001597117128"
          MESSAGE_THREAD_ID: "282263"
          API_ID: ${{ secrets.API_ID }}
          API_HASH: ${{ secrets.API_HASH }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          if [ ! -z "${{ secrets.BOT_TOKEN }}" ]; then
            export VERSION=$(<bin/version.txt)
            export TAGS="with_gvisor"
            export COMMIT=$(git log --oneline -n 5 --no-decorate | sed 's/^[0-9a-f]* //' | sed 's/^/â€” /')
            FILE=$(find bin -name "*.gz")
            pip3 install telethon==1.31.1
            python3 $GITHUB_WORKSPACE/.github/taamarinbot.py $FILE
          fi
